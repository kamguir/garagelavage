<?php

/**
 * Skeleton subclass for representing a row from the 'tbl_facture' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6-dev on:
 *
 * 10/12/13 18:14:04
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class TblFacture extends BaseTblFacture {

    public function __toString() {
        return $this->getIdFacture();
    }

    public function getLibelle() {
        return 'rrrr';
//        return $this->getRefTypeLavage()->getLibelle();
    }

    public function getMontantTotalParDate($date) {
        $jour = date('d');
        $mois = date('m');
        $annee = date('Y');
        if ($date == $jour) {
            $jourCourant = 'DAY(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $jour;
            $moisCourant = 'MONTH(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $mois;
            $anneeCourante = 'YEAR(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $annee;
        }
        if ($date == $mois) {
            $jourCourant = 'DAY(' . TblFacturePeer::DATE_REGLEMENT . ')between 1 and 31';
            $moisCourant = 'MONTH(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $mois;
            $anneeCourante = 'YEAR(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $annee;
        }
        if ($date == $annee) {
            $jourCourant = 'DAY(' . TblFacturePeer::DATE_REGLEMENT . ')between 1 and 31';
            $moisCourant = 'MONTH(' . TblFacturePeer::DATE_REGLEMENT . ')between 1 and 12';
            $anneeCourante = 'YEAR(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $annee;
        }
        return (double) TblFactureQuery::create()
                        ->addAnd(TblFacturePeer::DATE_REGLEMENT, $jourCourant, Criteria::CUSTOM)
                        ->addAnd(TblFacturePeer::DATE_REGLEMENT, $moisCourant, Criteria::CUSTOM)
                        ->addAnd(TblFacturePeer::DATE_REGLEMENT, $anneeCourante, Criteria::CUSTOM)
//                        ->useRefTypeLavageQuery()
//                        ->withColumn('SUM(' . RefTypeLavagePeer::MONTANT_LAVAGE . ')', "montantTotal")
//                        ->endUse()
                        ->withColumn('SUM(' . TblFacturePeer::PRIX_LAVAGE . ')', "montantTotal")
                        ->select('montantTotal')
                        ->findOne();

        echo Propel::getConnection()->getLastExecutedQuery();
        die;
    }

    public function getMontantTotalParWeek() {
        $weekAcctuel = 'WEEK(' . TblFacturePeer::DATE_REGLEMENT . ')=WEEK(CURDATE())';
        $anneeAcctuelle = 'YEAR(' . TblFacturePeer::DATE_REGLEMENT . ')=' . date('Y');

        return (double) TblFactureQuery::create()
                        ->addAnd(TblFacturePeer::DATE_REGLEMENT, $weekAcctuel, Criteria::CUSTOM)
                        ->addAnd(TblFacturePeer::DATE_REGLEMENT, $anneeAcctuelle, Criteria::CUSTOM)
//                        ->useRefTypeLavageQuery()
//                        ->withColumn('SUM(' . RefTypeLavagePeer::MONTANT_LAVAGE . ')', "montantTotal")
//                        ->endUse()
                        ->withColumn('SUM(' . TblFacturePeer::PRIX_LAVAGE . ')', "montantTotal")
                        ->select('montantTotal')
                        ->findOne();
        echo Propel::getConnection()->getLastExecutedQuery();
        die;
    }

    function getMontantReglement($mois) {

        return (double) TblFactureQuery::create()
                        ->addAnd(TblFacturePeer::DATE_REGLEMENT, 'MONTH(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $mois, Criteria::CUSTOM)
                        ->addAnd(TblFacturePeer::DATE_REGLEMENT, 'YEAR(' . TblFacturePeer::DATE_REGLEMENT . ')=' . date('Y'), Criteria::CUSTOM)
                        ->useLnkTypeLavageFactureQuery()
                        ->useRefTypeLavageQuery()
                        ->withColumn('SUM(' . RefTypeLavagePeer::MONTANT_LAVAGE . ')', "montantTotal")
                        ->endUse()
                        ->endUse()
//                        ->useRefTypeLavageQuery()
//                        ->withColumn('SUM(' . RefTypeLavagePeer::MONTANT_LAVAGE . ')', "montantTotal")
//                        ->endUse()
                        ->select('montantTotal')
                        ->findOne();
        echo Propel::getConnection()->getLastExecutedQuery();
        die;
    }

    public function toArrayString() {
        $nomEmploye = ' -- ';
        if ($this->getTblClient()) {
            $nomEmploye = $this->getTblClient()->getLibelle();
        }
        if ($this->getTblVoiture()) {
           $pieces = explode("/",  $this->getTblVoiture()->getImmatriculation());
           $marqueVoiture = $this->getTblVoiture()->getRefMarque()->getMarqueLibelle();
        }else{
            $imat = '0000/0/00';
            $pieces = explode("/",  $imat);
             $marqueVoiture = '--';
        }
        
        return array(
//            $this->getIdFacture(),
            $marqueVoiture,
            '<p dir=\'rtl\' lang=\'ar\'>'.$pieces[2].'/'.$pieces[1].'/'.$pieces[0].'</p>',
            $nomEmploye,
            $this->getPrixLavage(),
            $this->getDateReglement(),
            "DT_RowId" => "row_" . $this->getIdFacture()
        );
    }

    function getNrbVoituresparEmploye($idEmploye) {
        return (int) TblFactureQuery::create()
                        ->filterByIdEmploye($idEmploye)
                        ->count();
    }

}

// TblFacture
