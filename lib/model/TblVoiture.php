<?php

/**
 * Skeleton subclass for representing a row from the 'tbl_voiture' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6-dev on:
 *
 * 10/12/13 18:14:04
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class TblVoiture extends BaseTblVoiture {

    const LAVAGEEXTERIEUR = 1;
    const LAVAGEINTERIEUR = 2;
    const LAVAGESANSEAU = 3;
    const LAVAGEMOTORISATION = 4;
    const LAVAGECOMPLET = 5;
    const VIDANGE = 6;

    public function toArrayString() {
        $tblFactures = TblFactureQuery::create()
                ->filterByIdVoiture($this->getIdVoiture())
                ->findOne();
        $dateFacture = '';
        $dateEntree = '';
        $dateSortie = '';
        $montant = 000;
        if ($tblFactures) {
            $dateFacture = $tblFactures->getDateReglement();
            foreach ($tblFactures->getTblTickets() as $value) { /* @var $value LnkTypeLavageFacture */
                $dateEntree = $value->getDateEntreeGarage();
                $dateSortie = $value->getDateSortieGarage();
            }
            $montant = $tblFactures->getPrixLavage();
        }
        if(!$dateFacture){
            $dateFacture = 'Non Définie';
        }
        if(!$dateEntree){
            $dateEntree = 'Non Définie';
        }
        if(!$dateSortie){
            $dateSortie = 'Non Définie';
        }
        return array(
            $this->getImmatriculation(),
            $this->getTblClient()->getPrenomClient() . ' ' . $this->getTblClient()->getNomClient(),
            $this->getRefMarque()->getMarqueLibelle() . ', ' . $this->getRefMotorisation()->getMotorisation(),
            $montant,
            $dateFacture,
            $dateEntree,
            $dateSortie,
            '<div class="cercle" style="background-color:#' . $this->getCouleur() . ' ">&nbsp</div>',
            "DT_RowId" => "row_" . $this->getIdVoiture()
        );
    }

    public function getNomClient() {
//        if( isset($this->getTblClient()->getNomClient()) ){
//            return $this->getTblClient()->getNomClient();
//        }  else {
//            return '1';
//        }
    }

    public function getMarqueLibelle() {
        return $this->getRefMarque()->getMarqueLibelle();
    }

    public function getMotorisation() {
        return $this->getRefMotorisation()->getMotorisation();
    }

    public function getCodeCouleur() {
//        if ($couleur = $this->getRefCouleur()) {
//            return $couleur->getCode();
//        } else {
//            return '';
//        }
    }

    public function getNbrVoituresParDate($date) {
        $jour = date('d');
        $mois = date('m');
        $annee = date('Y');
        if ($date == $jour) {
            $jourCourant = 'DAY(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $jour;
            $moisCourant = 'MONTH(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $mois;
            $anneeCourante = 'YEAR(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $annee;
        } if ($date == $mois) {
            $jourCourant = 'DAY(' . TblFacturePeer::DATE_REGLEMENT . ')between 1 and 31';
            $moisCourant = 'MONTH(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $mois;
            $anneeCourante = 'YEAR(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $annee;
        } if ($date == $annee) {
            $jourCourant = 'DAY(' . TblFacturePeer::DATE_REGLEMENT . ')between 1 and 31';
            $moisCourant = 'MONTH(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $mois;
            $anneeCourante = 'YEAR(' . TblFacturePeer::DATE_REGLEMENT . ')=' . $annee;
        }
        return $nbrVoitures = TblVoitureQuery::create()
                ->useTblFactureQuery()
                ->addAnd(TblFacturePeer::DATE_REGLEMENT, $jourCourant, Criteria::CUSTOM)
                ->addAnd(TblFacturePeer::DATE_REGLEMENT, $moisCourant, Criteria::CUSTOM)
                ->addAnd(TblFacturePeer::DATE_REGLEMENT, $anneeCourante, Criteria::CUSTOM)
                ->endUse()
                ->count();

        echo Propel::getConnection()->getLastExecutedQuery();
        die;
    }

    public function getNbrVoituresParWeek() {
        $weekAcctuel = 'WEEK(' . TblFacturePeer::DATE_REGLEMENT . ')=WEEK(CURDATE())';
        $anneeAcctuelle = 'YEAR(' . TblFacturePeer::DATE_REGLEMENT . ')=' . date('Y');
        return $nbrVoitures = TblVoitureQuery::create()
                ->useTblFactureQuery()
                ->addAnd(TblFacturePeer::DATE_REGLEMENT, $weekAcctuel, Criteria::CUSTOM)
                ->addAnd(TblFacturePeer::DATE_REGLEMENT, $anneeAcctuelle, Criteria::CUSTOM)
                ->endUse()
                ->count();

        echo Propel::getConnection()->getLastExecutedQuery();
        die;
    }

    public function __toString() {
        return $this->getImmatriculation();
    }

}

// TblVoiture
