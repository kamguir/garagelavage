<?php


/**
 * Base class that represents a query for the 'tbl_depances' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6-dev on:
 *
 * 11/22/13 16:57:11
 *
 * @method     TblDepancesQuery orderByIdDepances($order = Criteria::ASC) Order by the id_depances column
 * @method     TblDepancesQuery orderByDateDepances($order = Criteria::ASC) Order by the date_depances column
 * @method     TblDepancesQuery orderByIdRefDepances($order = Criteria::ASC) Order by the id_ref_depances column
 * @method     TblDepancesQuery orderByMontantDepances($order = Criteria::ASC) Order by the montant_depances column
 * @method     TblDepancesQuery orderByEtatPayement($order = Criteria::ASC) Order by the etat_payement column
 *
 * @method     TblDepancesQuery groupByIdDepances() Group by the id_depances column
 * @method     TblDepancesQuery groupByDateDepances() Group by the date_depances column
 * @method     TblDepancesQuery groupByIdRefDepances() Group by the id_ref_depances column
 * @method     TblDepancesQuery groupByMontantDepances() Group by the montant_depances column
 * @method     TblDepancesQuery groupByEtatPayement() Group by the etat_payement column
 *
 * @method     TblDepancesQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     TblDepancesQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     TblDepancesQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     TblDepancesQuery leftJoinRefDepances($relationAlias = null) Adds a LEFT JOIN clause to the query using the RefDepances relation
 * @method     TblDepancesQuery rightJoinRefDepances($relationAlias = null) Adds a RIGHT JOIN clause to the query using the RefDepances relation
 * @method     TblDepancesQuery innerJoinRefDepances($relationAlias = null) Adds a INNER JOIN clause to the query using the RefDepances relation
 *
 * @method     TblDepances findOne(PropelPDO $con = null) Return the first TblDepances matching the query
 * @method     TblDepances findOneOrCreate(PropelPDO $con = null) Return the first TblDepances matching the query, or a new TblDepances object populated from the query conditions when no match is found
 *
 * @method     TblDepances findOneByIdDepances(int $id_depances) Return the first TblDepances filtered by the id_depances column
 * @method     TblDepances findOneByDateDepances(string $date_depances) Return the first TblDepances filtered by the date_depances column
 * @method     TblDepances findOneByIdRefDepances(int $id_ref_depances) Return the first TblDepances filtered by the id_ref_depances column
 * @method     TblDepances findOneByMontantDepances(double $montant_depances) Return the first TblDepances filtered by the montant_depances column
 * @method     TblDepances findOneByEtatPayement(boolean $etat_payement) Return the first TblDepances filtered by the etat_payement column
 *
 * @method     array findByIdDepances(int $id_depances) Return TblDepances objects filtered by the id_depances column
 * @method     array findByDateDepances(string $date_depances) Return TblDepances objects filtered by the date_depances column
 * @method     array findByIdRefDepances(int $id_ref_depances) Return TblDepances objects filtered by the id_ref_depances column
 * @method     array findByMontantDepances(double $montant_depances) Return TblDepances objects filtered by the montant_depances column
 * @method     array findByEtatPayement(boolean $etat_payement) Return TblDepances objects filtered by the etat_payement column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTblDepancesQuery extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseTblDepancesQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'TblDepances', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new TblDepancesQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    TblDepancesQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof TblDepancesQuery) {
			return $criteria;
		}
		$query = new TblDepancesQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    TblDepances|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = TblDepancesPeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(TblDepancesPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    TblDepances A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT `ID_DEPANCES`, `DATE_DEPANCES`, `ID_REF_DEPANCES`, `MONTANT_DEPANCES`, `ETAT_PAYEMENT` FROM `tbl_depances` WHERE `ID_DEPANCES` = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new TblDepances();
			$obj->hydrate($row);
			TblDepancesPeer::addInstanceToPool($obj, (string) $key);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    TblDepances|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    TblDepancesQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(TblDepancesPeer::ID_DEPANCES, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    TblDepancesQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(TblDepancesPeer::ID_DEPANCES, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id_depances column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByIdDepances(1234); // WHERE id_depances = 1234
	 * $query->filterByIdDepances(array(12, 34)); // WHERE id_depances IN (12, 34)
	 * $query->filterByIdDepances(array('min' => 12)); // WHERE id_depances > 12
	 * </code>
	 *
	 * @param     mixed $idDepances The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblDepancesQuery The current query, for fluid interface
	 */
	public function filterByIdDepances($idDepances = null, $comparison = null)
	{
		if (is_array($idDepances) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(TblDepancesPeer::ID_DEPANCES, $idDepances, $comparison);
	}

	/**
	 * Filter the query on the date_depances column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDateDepances('2011-03-14'); // WHERE date_depances = '2011-03-14'
	 * $query->filterByDateDepances('now'); // WHERE date_depances = '2011-03-14'
	 * $query->filterByDateDepances(array('max' => 'yesterday')); // WHERE date_depances > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $dateDepances The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblDepancesQuery The current query, for fluid interface
	 */
	public function filterByDateDepances($dateDepances = null, $comparison = null)
	{
		if (is_array($dateDepances)) {
			$useMinMax = false;
			if (isset($dateDepances['min'])) {
				$this->addUsingAlias(TblDepancesPeer::DATE_DEPANCES, $dateDepances['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($dateDepances['max'])) {
				$this->addUsingAlias(TblDepancesPeer::DATE_DEPANCES, $dateDepances['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblDepancesPeer::DATE_DEPANCES, $dateDepances, $comparison);
	}

	/**
	 * Filter the query on the id_ref_depances column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByIdRefDepances(1234); // WHERE id_ref_depances = 1234
	 * $query->filterByIdRefDepances(array(12, 34)); // WHERE id_ref_depances IN (12, 34)
	 * $query->filterByIdRefDepances(array('min' => 12)); // WHERE id_ref_depances > 12
	 * </code>
	 *
	 * @see       filterByRefDepances()
	 *
	 * @param     mixed $idRefDepances The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblDepancesQuery The current query, for fluid interface
	 */
	public function filterByIdRefDepances($idRefDepances = null, $comparison = null)
	{
		if (is_array($idRefDepances)) {
			$useMinMax = false;
			if (isset($idRefDepances['min'])) {
				$this->addUsingAlias(TblDepancesPeer::ID_REF_DEPANCES, $idRefDepances['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idRefDepances['max'])) {
				$this->addUsingAlias(TblDepancesPeer::ID_REF_DEPANCES, $idRefDepances['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblDepancesPeer::ID_REF_DEPANCES, $idRefDepances, $comparison);
	}

	/**
	 * Filter the query on the montant_depances column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByMontantDepances(1234); // WHERE montant_depances = 1234
	 * $query->filterByMontantDepances(array(12, 34)); // WHERE montant_depances IN (12, 34)
	 * $query->filterByMontantDepances(array('min' => 12)); // WHERE montant_depances > 12
	 * </code>
	 *
	 * @param     mixed $montantDepances The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblDepancesQuery The current query, for fluid interface
	 */
	public function filterByMontantDepances($montantDepances = null, $comparison = null)
	{
		if (is_array($montantDepances)) {
			$useMinMax = false;
			if (isset($montantDepances['min'])) {
				$this->addUsingAlias(TblDepancesPeer::MONTANT_DEPANCES, $montantDepances['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($montantDepances['max'])) {
				$this->addUsingAlias(TblDepancesPeer::MONTANT_DEPANCES, $montantDepances['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblDepancesPeer::MONTANT_DEPANCES, $montantDepances, $comparison);
	}

	/**
	 * Filter the query on the etat_payement column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByEtatPayement(true); // WHERE etat_payement = true
	 * $query->filterByEtatPayement('yes'); // WHERE etat_payement = true
	 * </code>
	 *
	 * @param     boolean|string $etatPayement The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblDepancesQuery The current query, for fluid interface
	 */
	public function filterByEtatPayement($etatPayement = null, $comparison = null)
	{
		if (is_string($etatPayement)) {
			$etat_payement = in_array(strtolower($etatPayement), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(TblDepancesPeer::ETAT_PAYEMENT, $etatPayement, $comparison);
	}

	/**
	 * Filter the query by a related RefDepances object
	 *
	 * @param     RefDepances|PropelCollection $refDepances The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblDepancesQuery The current query, for fluid interface
	 */
	public function filterByRefDepances($refDepances, $comparison = null)
	{
		if ($refDepances instanceof RefDepances) {
			return $this
				->addUsingAlias(TblDepancesPeer::ID_REF_DEPANCES, $refDepances->getIdRefDepances(), $comparison);
		} elseif ($refDepances instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(TblDepancesPeer::ID_REF_DEPANCES, $refDepances->toKeyValue('PrimaryKey', 'IdRefDepances'), $comparison);
		} else {
			throw new PropelException('filterByRefDepances() only accepts arguments of type RefDepances or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the RefDepances relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TblDepancesQuery The current query, for fluid interface
	 */
	public function joinRefDepances($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('RefDepances');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'RefDepances');
		}

		return $this;
	}

	/**
	 * Use the RefDepances relation RefDepances object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    RefDepancesQuery A secondary query class using the current class as primary query
	 */
	public function useRefDepancesQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinRefDepances($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'RefDepances', 'RefDepancesQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     TblDepances $tblDepances Object to remove from the list of results
	 *
	 * @return    TblDepancesQuery The current query, for fluid interface
	 */
	public function prune($tblDepances = null)
	{
		if ($tblDepances) {
			$this->addUsingAlias(TblDepancesPeer::ID_DEPANCES, $tblDepances->getIdDepances(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseTblDepancesQuery