<?php


/**
 * Base class that represents a query for the 'tbl_voiture' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6-dev on:
 *
 * 03/05/14 22:48:10
 *
 * @method     TblVoitureQuery orderByIdVoiture($order = Criteria::ASC) Order by the id_voiture column
 * @method     TblVoitureQuery orderByIdClient($order = Criteria::ASC) Order by the id_client column
 * @method     TblVoitureQuery orderByImmatriculation($order = Criteria::ASC) Order by the immatriculation column
 * @method     TblVoitureQuery orderByIdMarque($order = Criteria::ASC) Order by the id_marque column
 * @method     TblVoitureQuery orderByIdMotorisation($order = Criteria::ASC) Order by the id_motorisation column
 * @method     TblVoitureQuery orderByCouleur($order = Criteria::ASC) Order by the couleur column
 * @method     TblVoitureQuery orderByNbrPortes($order = Criteria::ASC) Order by the nbr_portes column
 * @method     TblVoitureQuery orderByModele($order = Criteria::ASC) Order by the modele column
 * @method     TblVoitureQuery orderByAnnee($order = Criteria::ASC) Order by the annee column
 * @method     TblVoitureQuery orderByNbVisite($order = Criteria::ASC) Order by the nb_visite column
 *
 * @method     TblVoitureQuery groupByIdVoiture() Group by the id_voiture column
 * @method     TblVoitureQuery groupByIdClient() Group by the id_client column
 * @method     TblVoitureQuery groupByImmatriculation() Group by the immatriculation column
 * @method     TblVoitureQuery groupByIdMarque() Group by the id_marque column
 * @method     TblVoitureQuery groupByIdMotorisation() Group by the id_motorisation column
 * @method     TblVoitureQuery groupByCouleur() Group by the couleur column
 * @method     TblVoitureQuery groupByNbrPortes() Group by the nbr_portes column
 * @method     TblVoitureQuery groupByModele() Group by the modele column
 * @method     TblVoitureQuery groupByAnnee() Group by the annee column
 * @method     TblVoitureQuery groupByNbVisite() Group by the nb_visite column
 *
 * @method     TblVoitureQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     TblVoitureQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     TblVoitureQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     TblVoitureQuery leftJoinTblClient($relationAlias = null) Adds a LEFT JOIN clause to the query using the TblClient relation
 * @method     TblVoitureQuery rightJoinTblClient($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TblClient relation
 * @method     TblVoitureQuery innerJoinTblClient($relationAlias = null) Adds a INNER JOIN clause to the query using the TblClient relation
 *
 * @method     TblVoitureQuery leftJoinRefMarque($relationAlias = null) Adds a LEFT JOIN clause to the query using the RefMarque relation
 * @method     TblVoitureQuery rightJoinRefMarque($relationAlias = null) Adds a RIGHT JOIN clause to the query using the RefMarque relation
 * @method     TblVoitureQuery innerJoinRefMarque($relationAlias = null) Adds a INNER JOIN clause to the query using the RefMarque relation
 *
 * @method     TblVoitureQuery leftJoinRefMotorisation($relationAlias = null) Adds a LEFT JOIN clause to the query using the RefMotorisation relation
 * @method     TblVoitureQuery rightJoinRefMotorisation($relationAlias = null) Adds a RIGHT JOIN clause to the query using the RefMotorisation relation
 * @method     TblVoitureQuery innerJoinRefMotorisation($relationAlias = null) Adds a INNER JOIN clause to the query using the RefMotorisation relation
 *
 * @method     TblVoitureQuery leftJoinRefNbrPortes($relationAlias = null) Adds a LEFT JOIN clause to the query using the RefNbrPortes relation
 * @method     TblVoitureQuery rightJoinRefNbrPortes($relationAlias = null) Adds a RIGHT JOIN clause to the query using the RefNbrPortes relation
 * @method     TblVoitureQuery innerJoinRefNbrPortes($relationAlias = null) Adds a INNER JOIN clause to the query using the RefNbrPortes relation
 *
 * @method     TblVoitureQuery leftJoinTblFacture($relationAlias = null) Adds a LEFT JOIN clause to the query using the TblFacture relation
 * @method     TblVoitureQuery rightJoinTblFacture($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TblFacture relation
 * @method     TblVoitureQuery innerJoinTblFacture($relationAlias = null) Adds a INNER JOIN clause to the query using the TblFacture relation
 *
 * @method     TblVoiture findOne(PropelPDO $con = null) Return the first TblVoiture matching the query
 * @method     TblVoiture findOneOrCreate(PropelPDO $con = null) Return the first TblVoiture matching the query, or a new TblVoiture object populated from the query conditions when no match is found
 *
 * @method     TblVoiture findOneByIdVoiture(int $id_voiture) Return the first TblVoiture filtered by the id_voiture column
 * @method     TblVoiture findOneByIdClient(int $id_client) Return the first TblVoiture filtered by the id_client column
 * @method     TblVoiture findOneByImmatriculation(string $immatriculation) Return the first TblVoiture filtered by the immatriculation column
 * @method     TblVoiture findOneByIdMarque(int $id_marque) Return the first TblVoiture filtered by the id_marque column
 * @method     TblVoiture findOneByIdMotorisation(int $id_motorisation) Return the first TblVoiture filtered by the id_motorisation column
 * @method     TblVoiture findOneByCouleur(string $couleur) Return the first TblVoiture filtered by the couleur column
 * @method     TblVoiture findOneByNbrPortes(int $nbr_portes) Return the first TblVoiture filtered by the nbr_portes column
 * @method     TblVoiture findOneByModele(string $modele) Return the first TblVoiture filtered by the modele column
 * @method     TblVoiture findOneByAnnee(int $annee) Return the first TblVoiture filtered by the annee column
 * @method     TblVoiture findOneByNbVisite(int $nb_visite) Return the first TblVoiture filtered by the nb_visite column
 *
 * @method     array findByIdVoiture(int $id_voiture) Return TblVoiture objects filtered by the id_voiture column
 * @method     array findByIdClient(int $id_client) Return TblVoiture objects filtered by the id_client column
 * @method     array findByImmatriculation(string $immatriculation) Return TblVoiture objects filtered by the immatriculation column
 * @method     array findByIdMarque(int $id_marque) Return TblVoiture objects filtered by the id_marque column
 * @method     array findByIdMotorisation(int $id_motorisation) Return TblVoiture objects filtered by the id_motorisation column
 * @method     array findByCouleur(string $couleur) Return TblVoiture objects filtered by the couleur column
 * @method     array findByNbrPortes(int $nbr_portes) Return TblVoiture objects filtered by the nbr_portes column
 * @method     array findByModele(string $modele) Return TblVoiture objects filtered by the modele column
 * @method     array findByAnnee(int $annee) Return TblVoiture objects filtered by the annee column
 * @method     array findByNbVisite(int $nb_visite) Return TblVoiture objects filtered by the nb_visite column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTblVoitureQuery extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseTblVoitureQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'TblVoiture', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new TblVoitureQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    TblVoitureQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof TblVoitureQuery) {
			return $criteria;
		}
		$query = new TblVoitureQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    TblVoiture|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = TblVoiturePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(TblVoiturePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    TblVoiture A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT `ID_VOITURE`, `ID_CLIENT`, `IMMATRICULATION`, `ID_MARQUE`, `ID_MOTORISATION`, `COULEUR`, `NBR_PORTES`, `MODELE`, `ANNEE`, `NB_VISITE` FROM `tbl_voiture` WHERE `ID_VOITURE` = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new TblVoiture();
			$obj->hydrate($row);
			TblVoiturePeer::addInstanceToPool($obj, (string) $key);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    TblVoiture|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(TblVoiturePeer::ID_VOITURE, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(TblVoiturePeer::ID_VOITURE, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id_voiture column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByIdVoiture(1234); // WHERE id_voiture = 1234
	 * $query->filterByIdVoiture(array(12, 34)); // WHERE id_voiture IN (12, 34)
	 * $query->filterByIdVoiture(array('min' => 12)); // WHERE id_voiture > 12
	 * </code>
	 *
	 * @param     mixed $idVoiture The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByIdVoiture($idVoiture = null, $comparison = null)
	{
		if (is_array($idVoiture) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(TblVoiturePeer::ID_VOITURE, $idVoiture, $comparison);
	}

	/**
	 * Filter the query on the id_client column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByIdClient(1234); // WHERE id_client = 1234
	 * $query->filterByIdClient(array(12, 34)); // WHERE id_client IN (12, 34)
	 * $query->filterByIdClient(array('min' => 12)); // WHERE id_client > 12
	 * </code>
	 *
	 * @see       filterByTblClient()
	 *
	 * @param     mixed $idClient The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByIdClient($idClient = null, $comparison = null)
	{
		if (is_array($idClient)) {
			$useMinMax = false;
			if (isset($idClient['min'])) {
				$this->addUsingAlias(TblVoiturePeer::ID_CLIENT, $idClient['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idClient['max'])) {
				$this->addUsingAlias(TblVoiturePeer::ID_CLIENT, $idClient['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblVoiturePeer::ID_CLIENT, $idClient, $comparison);
	}

	/**
	 * Filter the query on the immatriculation column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByImmatriculation('fooValue');   // WHERE immatriculation = 'fooValue'
	 * $query->filterByImmatriculation('%fooValue%'); // WHERE immatriculation LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $immatriculation The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByImmatriculation($immatriculation = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($immatriculation)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $immatriculation)) {
				$immatriculation = str_replace('*', '%', $immatriculation);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(TblVoiturePeer::IMMATRICULATION, $immatriculation, $comparison);
	}

	/**
	 * Filter the query on the id_marque column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByIdMarque(1234); // WHERE id_marque = 1234
	 * $query->filterByIdMarque(array(12, 34)); // WHERE id_marque IN (12, 34)
	 * $query->filterByIdMarque(array('min' => 12)); // WHERE id_marque > 12
	 * </code>
	 *
	 * @see       filterByRefMarque()
	 *
	 * @param     mixed $idMarque The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByIdMarque($idMarque = null, $comparison = null)
	{
		if (is_array($idMarque)) {
			$useMinMax = false;
			if (isset($idMarque['min'])) {
				$this->addUsingAlias(TblVoiturePeer::ID_MARQUE, $idMarque['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idMarque['max'])) {
				$this->addUsingAlias(TblVoiturePeer::ID_MARQUE, $idMarque['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblVoiturePeer::ID_MARQUE, $idMarque, $comparison);
	}

	/**
	 * Filter the query on the id_motorisation column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByIdMotorisation(1234); // WHERE id_motorisation = 1234
	 * $query->filterByIdMotorisation(array(12, 34)); // WHERE id_motorisation IN (12, 34)
	 * $query->filterByIdMotorisation(array('min' => 12)); // WHERE id_motorisation > 12
	 * </code>
	 *
	 * @see       filterByRefMotorisation()
	 *
	 * @param     mixed $idMotorisation The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByIdMotorisation($idMotorisation = null, $comparison = null)
	{
		if (is_array($idMotorisation)) {
			$useMinMax = false;
			if (isset($idMotorisation['min'])) {
				$this->addUsingAlias(TblVoiturePeer::ID_MOTORISATION, $idMotorisation['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idMotorisation['max'])) {
				$this->addUsingAlias(TblVoiturePeer::ID_MOTORISATION, $idMotorisation['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblVoiturePeer::ID_MOTORISATION, $idMotorisation, $comparison);
	}

	/**
	 * Filter the query on the couleur column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByCouleur('fooValue');   // WHERE couleur = 'fooValue'
	 * $query->filterByCouleur('%fooValue%'); // WHERE couleur LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $couleur The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByCouleur($couleur = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($couleur)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $couleur)) {
				$couleur = str_replace('*', '%', $couleur);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(TblVoiturePeer::COULEUR, $couleur, $comparison);
	}

	/**
	 * Filter the query on the nbr_portes column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByNbrPortes(1234); // WHERE nbr_portes = 1234
	 * $query->filterByNbrPortes(array(12, 34)); // WHERE nbr_portes IN (12, 34)
	 * $query->filterByNbrPortes(array('min' => 12)); // WHERE nbr_portes > 12
	 * </code>
	 *
	 * @see       filterByRefNbrPortes()
	 *
	 * @param     mixed $nbrPortes The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByNbrPortes($nbrPortes = null, $comparison = null)
	{
		if (is_array($nbrPortes)) {
			$useMinMax = false;
			if (isset($nbrPortes['min'])) {
				$this->addUsingAlias(TblVoiturePeer::NBR_PORTES, $nbrPortes['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($nbrPortes['max'])) {
				$this->addUsingAlias(TblVoiturePeer::NBR_PORTES, $nbrPortes['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblVoiturePeer::NBR_PORTES, $nbrPortes, $comparison);
	}

	/**
	 * Filter the query on the modele column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByModele('fooValue');   // WHERE modele = 'fooValue'
	 * $query->filterByModele('%fooValue%'); // WHERE modele LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $modele The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByModele($modele = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($modele)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $modele)) {
				$modele = str_replace('*', '%', $modele);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(TblVoiturePeer::MODELE, $modele, $comparison);
	}

	/**
	 * Filter the query on the annee column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByAnnee(1234); // WHERE annee = 1234
	 * $query->filterByAnnee(array(12, 34)); // WHERE annee IN (12, 34)
	 * $query->filterByAnnee(array('min' => 12)); // WHERE annee > 12
	 * </code>
	 *
	 * @param     mixed $annee The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByAnnee($annee = null, $comparison = null)
	{
		if (is_array($annee)) {
			$useMinMax = false;
			if (isset($annee['min'])) {
				$this->addUsingAlias(TblVoiturePeer::ANNEE, $annee['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($annee['max'])) {
				$this->addUsingAlias(TblVoiturePeer::ANNEE, $annee['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblVoiturePeer::ANNEE, $annee, $comparison);
	}

	/**
	 * Filter the query on the nb_visite column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByNbVisite(1234); // WHERE nb_visite = 1234
	 * $query->filterByNbVisite(array(12, 34)); // WHERE nb_visite IN (12, 34)
	 * $query->filterByNbVisite(array('min' => 12)); // WHERE nb_visite > 12
	 * </code>
	 *
	 * @param     mixed $nbVisite The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByNbVisite($nbVisite = null, $comparison = null)
	{
		if (is_array($nbVisite)) {
			$useMinMax = false;
			if (isset($nbVisite['min'])) {
				$this->addUsingAlias(TblVoiturePeer::NB_VISITE, $nbVisite['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($nbVisite['max'])) {
				$this->addUsingAlias(TblVoiturePeer::NB_VISITE, $nbVisite['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblVoiturePeer::NB_VISITE, $nbVisite, $comparison);
	}

	/**
	 * Filter the query by a related TblClient object
	 *
	 * @param     TblClient|PropelCollection $tblClient The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByTblClient($tblClient, $comparison = null)
	{
		if ($tblClient instanceof TblClient) {
			return $this
				->addUsingAlias(TblVoiturePeer::ID_CLIENT, $tblClient->getIdClient(), $comparison);
		} elseif ($tblClient instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(TblVoiturePeer::ID_CLIENT, $tblClient->toKeyValue('PrimaryKey', 'IdClient'), $comparison);
		} else {
			throw new PropelException('filterByTblClient() only accepts arguments of type TblClient or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the TblClient relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function joinTblClient($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('TblClient');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'TblClient');
		}

		return $this;
	}

	/**
	 * Use the TblClient relation TblClient object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TblClientQuery A secondary query class using the current class as primary query
	 */
	public function useTblClientQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinTblClient($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'TblClient', 'TblClientQuery');
	}

	/**
	 * Filter the query by a related RefMarque object
	 *
	 * @param     RefMarque|PropelCollection $refMarque The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByRefMarque($refMarque, $comparison = null)
	{
		if ($refMarque instanceof RefMarque) {
			return $this
				->addUsingAlias(TblVoiturePeer::ID_MARQUE, $refMarque->getMarqueId(), $comparison);
		} elseif ($refMarque instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(TblVoiturePeer::ID_MARQUE, $refMarque->toKeyValue('PrimaryKey', 'MarqueId'), $comparison);
		} else {
			throw new PropelException('filterByRefMarque() only accepts arguments of type RefMarque or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the RefMarque relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function joinRefMarque($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('RefMarque');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'RefMarque');
		}

		return $this;
	}

	/**
	 * Use the RefMarque relation RefMarque object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    RefMarqueQuery A secondary query class using the current class as primary query
	 */
	public function useRefMarqueQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinRefMarque($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'RefMarque', 'RefMarqueQuery');
	}

	/**
	 * Filter the query by a related RefMotorisation object
	 *
	 * @param     RefMotorisation|PropelCollection $refMotorisation The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByRefMotorisation($refMotorisation, $comparison = null)
	{
		if ($refMotorisation instanceof RefMotorisation) {
			return $this
				->addUsingAlias(TblVoiturePeer::ID_MOTORISATION, $refMotorisation->getIdMotorisation(), $comparison);
		} elseif ($refMotorisation instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(TblVoiturePeer::ID_MOTORISATION, $refMotorisation->toKeyValue('PrimaryKey', 'IdMotorisation'), $comparison);
		} else {
			throw new PropelException('filterByRefMotorisation() only accepts arguments of type RefMotorisation or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the RefMotorisation relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function joinRefMotorisation($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('RefMotorisation');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'RefMotorisation');
		}

		return $this;
	}

	/**
	 * Use the RefMotorisation relation RefMotorisation object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    RefMotorisationQuery A secondary query class using the current class as primary query
	 */
	public function useRefMotorisationQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinRefMotorisation($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'RefMotorisation', 'RefMotorisationQuery');
	}

	/**
	 * Filter the query by a related RefNbrPortes object
	 *
	 * @param     RefNbrPortes|PropelCollection $refNbrPortes The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByRefNbrPortes($refNbrPortes, $comparison = null)
	{
		if ($refNbrPortes instanceof RefNbrPortes) {
			return $this
				->addUsingAlias(TblVoiturePeer::NBR_PORTES, $refNbrPortes->getIdNbrPortes(), $comparison);
		} elseif ($refNbrPortes instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(TblVoiturePeer::NBR_PORTES, $refNbrPortes->toKeyValue('PrimaryKey', 'IdNbrPortes'), $comparison);
		} else {
			throw new PropelException('filterByRefNbrPortes() only accepts arguments of type RefNbrPortes or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the RefNbrPortes relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function joinRefNbrPortes($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('RefNbrPortes');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'RefNbrPortes');
		}

		return $this;
	}

	/**
	 * Use the RefNbrPortes relation RefNbrPortes object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    RefNbrPortesQuery A secondary query class using the current class as primary query
	 */
	public function useRefNbrPortesQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinRefNbrPortes($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'RefNbrPortes', 'RefNbrPortesQuery');
	}

	/**
	 * Filter the query by a related TblFacture object
	 *
	 * @param     TblFacture $tblFacture  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function filterByTblFacture($tblFacture, $comparison = null)
	{
		if ($tblFacture instanceof TblFacture) {
			return $this
				->addUsingAlias(TblVoiturePeer::ID_VOITURE, $tblFacture->getIdVoiture(), $comparison);
		} elseif ($tblFacture instanceof PropelCollection) {
			return $this
				->useTblFactureQuery()
				->filterByPrimaryKeys($tblFacture->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByTblFacture() only accepts arguments of type TblFacture or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the TblFacture relation
	 *
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function joinTblFacture($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('TblFacture');

		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}

		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'TblFacture');
		}

		return $this;
	}

	/**
	 * Use the TblFacture relation TblFacture object
	 *
	 * @see       useQuery()
	 *
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TblFactureQuery A secondary query class using the current class as primary query
	 */
	public function useTblFactureQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinTblFacture($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'TblFacture', 'TblFactureQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     TblVoiture $tblVoiture Object to remove from the list of results
	 *
	 * @return    TblVoitureQuery The current query, for fluid interface
	 */
	public function prune($tblVoiture = null)
	{
		if ($tblVoiture) {
			$this->addUsingAlias(TblVoiturePeer::ID_VOITURE, $tblVoiture->getIdVoiture(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseTblVoitureQuery