<?php


/**
 * Base class that represents a row from the 'tbl_client' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6-dev on:
 *
 * 03/05/14 22:48:05
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTblClient extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'TblClientPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TblClientPeer
	 */
	protected static $peer;

	/**
	 * The flag var to prevent infinit loop in deep copy
	 * @var       boolean
	 */
	protected $startCopy = false;

	/**
	 * The value for the id_client field.
	 * @var        int
	 */
	protected $id_client;

	/**
	 * The value for the cin_client field.
	 * @var        string
	 */
	protected $cin_client;

	/**
	 * The value for the nom_client field.
	 * @var        string
	 */
	protected $nom_client;

	/**
	 * The value for the prenom_client field.
	 * @var        string
	 */
	protected $prenom_client;

	/**
	 * The value for the situation field.
	 * @var        int
	 */
	protected $situation;

	/**
	 * The value for the age_client field.
	 * @var        int
	 */
	protected $age_client;

	/**
	 * The value for the num_tel field.
	 * @var        int
	 */
	protected $num_tel;

	/**
	 * The value for the adresse_client field.
	 * @var        string
	 */
	protected $adresse_client;

	/**
	 * The value for the fonction_client field.
	 * @var        string
	 */
	protected $fonction_client;

	/**
	 * The value for the is_employe field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_employe;

	/**
	 * @var        RefSituation
	 */
	protected $aRefSituation;

	/**
	 * @var        array TblFacture[] Collection to store aggregation of TblFacture objects.
	 */
	protected $collTblFactures;

	/**
	 * @var        array TblVoiture[] Collection to store aggregation of TblVoiture objects.
	 */
	protected $collTblVoitures;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * An array of objects scheduled for deletion.
	 * @var		array
	 */
	protected $tblFacturesScheduledForDeletion = null;

	/**
	 * An array of objects scheduled for deletion.
	 * @var		array
	 */
	protected $tblVoituresScheduledForDeletion = null;

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->is_employe = false;
	}

	/**
	 * Initializes internal state of BaseTblClient object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id_client] column value.
	 * 
	 * @return     int
	 */
	public function getIdClient()
	{
		return $this->id_client;
	}

	/**
	 * Get the [cin_client] column value.
	 * 
	 * @return     string
	 */
	public function getCinClient()
	{
		return $this->cin_client;
	}

	/**
	 * Get the [nom_client] column value.
	 * 
	 * @return     string
	 */
	public function getNomClient()
	{
		return $this->nom_client;
	}

	/**
	 * Get the [prenom_client] column value.
	 * 
	 * @return     string
	 */
	public function getPrenomClient()
	{
		return $this->prenom_client;
	}

	/**
	 * Get the [situation] column value.
	 * 
	 * @return     int
	 */
	public function getSituation()
	{
		return $this->situation;
	}

	/**
	 * Get the [age_client] column value.
	 * 
	 * @return     int
	 */
	public function getAgeClient()
	{
		return $this->age_client;
	}

	/**
	 * Get the [num_tel] column value.
	 * 
	 * @return     int
	 */
	public function getNumTel()
	{
		return $this->num_tel;
	}

	/**
	 * Get the [adresse_client] column value.
	 * 
	 * @return     string
	 */
	public function getAdresseClient()
	{
		return $this->adresse_client;
	}

	/**
	 * Get the [fonction_client] column value.
	 * 
	 * @return     string
	 */
	public function getFonctionClient()
	{
		return $this->fonction_client;
	}

	/**
	 * Get the [is_employe] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsEmploye()
	{
		return $this->is_employe;
	}

	/**
	 * Set the value of [id_client] column.
	 * 
	 * @param      int $v new value
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function setIdClient($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_client !== $v) {
			$this->id_client = $v;
			$this->modifiedColumns[] = TblClientPeer::ID_CLIENT;
		}

		return $this;
	} // setIdClient()

	/**
	 * Set the value of [cin_client] column.
	 * 
	 * @param      string $v new value
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function setCinClient($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cin_client !== $v) {
			$this->cin_client = $v;
			$this->modifiedColumns[] = TblClientPeer::CIN_CLIENT;
		}

		return $this;
	} // setCinClient()

	/**
	 * Set the value of [nom_client] column.
	 * 
	 * @param      string $v new value
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function setNomClient($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nom_client !== $v) {
			$this->nom_client = $v;
			$this->modifiedColumns[] = TblClientPeer::NOM_CLIENT;
		}

		return $this;
	} // setNomClient()

	/**
	 * Set the value of [prenom_client] column.
	 * 
	 * @param      string $v new value
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function setPrenomClient($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->prenom_client !== $v) {
			$this->prenom_client = $v;
			$this->modifiedColumns[] = TblClientPeer::PRENOM_CLIENT;
		}

		return $this;
	} // setPrenomClient()

	/**
	 * Set the value of [situation] column.
	 * 
	 * @param      int $v new value
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function setSituation($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->situation !== $v) {
			$this->situation = $v;
			$this->modifiedColumns[] = TblClientPeer::SITUATION;
		}

		if ($this->aRefSituation !== null && $this->aRefSituation->getIdSituation() !== $v) {
			$this->aRefSituation = null;
		}

		return $this;
	} // setSituation()

	/**
	 * Set the value of [age_client] column.
	 * 
	 * @param      int $v new value
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function setAgeClient($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->age_client !== $v) {
			$this->age_client = $v;
			$this->modifiedColumns[] = TblClientPeer::AGE_CLIENT;
		}

		return $this;
	} // setAgeClient()

	/**
	 * Set the value of [num_tel] column.
	 * 
	 * @param      int $v new value
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function setNumTel($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->num_tel !== $v) {
			$this->num_tel = $v;
			$this->modifiedColumns[] = TblClientPeer::NUM_TEL;
		}

		return $this;
	} // setNumTel()

	/**
	 * Set the value of [adresse_client] column.
	 * 
	 * @param      string $v new value
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function setAdresseClient($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->adresse_client !== $v) {
			$this->adresse_client = $v;
			$this->modifiedColumns[] = TblClientPeer::ADRESSE_CLIENT;
		}

		return $this;
	} // setAdresseClient()

	/**
	 * Set the value of [fonction_client] column.
	 * 
	 * @param      string $v new value
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function setFonctionClient($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fonction_client !== $v) {
			$this->fonction_client = $v;
			$this->modifiedColumns[] = TblClientPeer::FONCTION_CLIENT;
		}

		return $this;
	} // setFonctionClient()

	/**
	 * Sets the value of the [is_employe] column.
	 * Non-boolean arguments are converted using the following rules:
	 *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * 
	 * @param      boolean|integer|string $v The new value
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function setIsEmploye($v)
	{
		if ($v !== null) {
			if (is_string($v)) {
				$v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
			} else {
				$v = (boolean) $v;
			}
		}

		if ($this->is_employe !== $v) {
			$this->is_employe = $v;
			$this->modifiedColumns[] = TblClientPeer::IS_EMPLOYE;
		}

		return $this;
	} // setIsEmploye()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->is_employe !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id_client = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->cin_client = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->nom_client = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->prenom_client = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->situation = ($row[$startcol + 4] !== null) ? (int) $row[$startcol + 4] : null;
			$this->age_client = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->num_tel = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->adresse_client = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->fonction_client = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->is_employe = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 10; // 10 = TblClientPeer::NUM_HYDRATE_COLUMNS.

		} catch (Exception $e) {
			throw new PropelException("Error populating TblClient object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aRefSituation !== null && $this->situation !== $this->aRefSituation->getIdSituation()) {
			$this->aRefSituation = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TblClientPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TblClientPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aRefSituation = null;
			$this->collTblFactures = null;

			$this->collTblVoitures = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TblClientPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$deleteQuery = TblClientQuery::create()
				->filterByPrimaryKey($this->getPrimaryKey());
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTblClient:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				$deleteQuery->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTblClient:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (Exception $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TblClientPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseTblClient:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseTblClient:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				TblClientPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (Exception $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRefSituation !== null) {
				if ($this->aRefSituation->isModified() || $this->aRefSituation->isNew()) {
					$affectedRows += $this->aRefSituation->save($con);
				}
				$this->setRefSituation($this->aRefSituation);
			}

			if ($this->isNew() || $this->isModified()) {
				// persist changes
				if ($this->isNew()) {
					$this->doInsert($con);
				} else {
					$this->doUpdate($con);
				}
				$affectedRows += 1;
				$this->resetModified();
			}

			if ($this->tblFacturesScheduledForDeletion !== null) {
				if (!$this->tblFacturesScheduledForDeletion->isEmpty()) {
					TblFactureQuery::create()
						->filterByPrimaryKeys($this->tblFacturesScheduledForDeletion->getPrimaryKeys(false))
						->delete($con);
					$this->tblFacturesScheduledForDeletion = null;
				}
			}

			if ($this->collTblFactures !== null) {
				foreach ($this->collTblFactures as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->tblVoituresScheduledForDeletion !== null) {
				if (!$this->tblVoituresScheduledForDeletion->isEmpty()) {
					TblVoitureQuery::create()
						->filterByPrimaryKeys($this->tblVoituresScheduledForDeletion->getPrimaryKeys(false))
						->delete($con);
					$this->tblVoituresScheduledForDeletion = null;
				}
			}

			if ($this->collTblVoitures !== null) {
				foreach ($this->collTblVoitures as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Insert the row in the database.
	 *
	 * @param      PropelPDO $con
	 *
	 * @throws     PropelException
	 * @see        doSave()
	 */
	protected function doInsert(PropelPDO $con)
	{
		$modifiedColumns = array();
		$index = 0;

		$this->modifiedColumns[] = TblClientPeer::ID_CLIENT;
		if (null !== $this->id_client) {
			throw new PropelException('Cannot insert a value for auto-increment primary key (' . TblClientPeer::ID_CLIENT . ')');
		}

		 // check the columns in natural order for more readable SQL queries
		if ($this->isColumnModified(TblClientPeer::ID_CLIENT)) {
			$modifiedColumns[':p' . $index++]  = '`ID_CLIENT`';
		}
		if ($this->isColumnModified(TblClientPeer::CIN_CLIENT)) {
			$modifiedColumns[':p' . $index++]  = '`CIN_CLIENT`';
		}
		if ($this->isColumnModified(TblClientPeer::NOM_CLIENT)) {
			$modifiedColumns[':p' . $index++]  = '`NOM_CLIENT`';
		}
		if ($this->isColumnModified(TblClientPeer::PRENOM_CLIENT)) {
			$modifiedColumns[':p' . $index++]  = '`PRENOM_CLIENT`';
		}
		if ($this->isColumnModified(TblClientPeer::SITUATION)) {
			$modifiedColumns[':p' . $index++]  = '`SITUATION`';
		}
		if ($this->isColumnModified(TblClientPeer::AGE_CLIENT)) {
			$modifiedColumns[':p' . $index++]  = '`AGE_CLIENT`';
		}
		if ($this->isColumnModified(TblClientPeer::NUM_TEL)) {
			$modifiedColumns[':p' . $index++]  = '`NUM_TEL`';
		}
		if ($this->isColumnModified(TblClientPeer::ADRESSE_CLIENT)) {
			$modifiedColumns[':p' . $index++]  = '`ADRESSE_CLIENT`';
		}
		if ($this->isColumnModified(TblClientPeer::FONCTION_CLIENT)) {
			$modifiedColumns[':p' . $index++]  = '`FONCTION_CLIENT`';
		}
		if ($this->isColumnModified(TblClientPeer::IS_EMPLOYE)) {
			$modifiedColumns[':p' . $index++]  = '`IS_EMPLOYE`';
		}

		$sql = sprintf(
			'INSERT INTO `tbl_client` (%s) VALUES (%s)',
			implode(', ', $modifiedColumns),
			implode(', ', array_keys($modifiedColumns))
		);

		try {
			$stmt = $con->prepare($sql);
			foreach ($modifiedColumns as $identifier => $columnName) {
				switch ($columnName) {
					case '`ID_CLIENT`':
						$stmt->bindValue($identifier, $this->id_client, PDO::PARAM_INT);
						break;
					case '`CIN_CLIENT`':
						$stmt->bindValue($identifier, $this->cin_client, PDO::PARAM_STR);
						break;
					case '`NOM_CLIENT`':
						$stmt->bindValue($identifier, $this->nom_client, PDO::PARAM_STR);
						break;
					case '`PRENOM_CLIENT`':
						$stmt->bindValue($identifier, $this->prenom_client, PDO::PARAM_STR);
						break;
					case '`SITUATION`':
						$stmt->bindValue($identifier, $this->situation, PDO::PARAM_INT);
						break;
					case '`AGE_CLIENT`':
						$stmt->bindValue($identifier, $this->age_client, PDO::PARAM_INT);
						break;
					case '`NUM_TEL`':
						$stmt->bindValue($identifier, $this->num_tel, PDO::PARAM_INT);
						break;
					case '`ADRESSE_CLIENT`':
						$stmt->bindValue($identifier, $this->adresse_client, PDO::PARAM_STR);
						break;
					case '`FONCTION_CLIENT`':
						$stmt->bindValue($identifier, $this->fonction_client, PDO::PARAM_STR);
						break;
					case '`IS_EMPLOYE`':
						$stmt->bindValue($identifier, (int) $this->is_employe, PDO::PARAM_INT);
						break;
				}
			}
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute INSERT statement [%s]', $sql), $e);
		}

		try {
			$pk = $con->lastInsertId();
		} catch (Exception $e) {
			throw new PropelException('Unable to get autoincrement id.', $e);
		}
		$this->setIdClient($pk);

		$this->setNew(false);
	}

	/**
	 * Update the row in the database.
	 *
	 * @param      PropelPDO $con
	 *
	 * @see        doSave()
	 */
	protected function doUpdate(PropelPDO $con)
	{
		$selectCriteria = $this->buildPkeyCriteria();
		$valuesCriteria = $this->buildCriteria();
		BasePeer::doUpdate($selectCriteria, $valuesCriteria, $con);
	}

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aRefSituation !== null) {
				if (!$this->aRefSituation->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRefSituation->getValidationFailures());
				}
			}


			if (($retval = TblClientPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collTblFactures !== null) {
					foreach ($this->collTblFactures as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTblVoitures !== null) {
					foreach ($this->collTblVoitures as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TblClientPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getIdClient();
				break;
			case 1:
				return $this->getCinClient();
				break;
			case 2:
				return $this->getNomClient();
				break;
			case 3:
				return $this->getPrenomClient();
				break;
			case 4:
				return $this->getSituation();
				break;
			case 5:
				return $this->getAgeClient();
				break;
			case 6:
				return $this->getNumTel();
				break;
			case 7:
				return $this->getAdresseClient();
				break;
			case 8:
				return $this->getFonctionClient();
				break;
			case 9:
				return $this->getIsEmploye();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
	{
		if (isset($alreadyDumpedObjects['TblClient'][$this->getPrimaryKey()])) {
			return '*RECURSION*';
		}
		$alreadyDumpedObjects['TblClient'][$this->getPrimaryKey()] = true;
		$keys = TblClientPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getIdClient(),
			$keys[1] => $this->getCinClient(),
			$keys[2] => $this->getNomClient(),
			$keys[3] => $this->getPrenomClient(),
			$keys[4] => $this->getSituation(),
			$keys[5] => $this->getAgeClient(),
			$keys[6] => $this->getNumTel(),
			$keys[7] => $this->getAdresseClient(),
			$keys[8] => $this->getFonctionClient(),
			$keys[9] => $this->getIsEmploye(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->aRefSituation) {
				$result['RefSituation'] = $this->aRefSituation->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->collTblFactures) {
				$result['TblFactures'] = $this->collTblFactures->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collTblVoitures) {
				$result['TblVoitures'] = $this->collTblVoitures->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TblClientPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setIdClient($value);
				break;
			case 1:
				$this->setCinClient($value);
				break;
			case 2:
				$this->setNomClient($value);
				break;
			case 3:
				$this->setPrenomClient($value);
				break;
			case 4:
				$this->setSituation($value);
				break;
			case 5:
				$this->setAgeClient($value);
				break;
			case 6:
				$this->setNumTel($value);
				break;
			case 7:
				$this->setAdresseClient($value);
				break;
			case 8:
				$this->setFonctionClient($value);
				break;
			case 9:
				$this->setIsEmploye($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TblClientPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setIdClient($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCinClient($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setNomClient($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setPrenomClient($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setSituation($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAgeClient($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setNumTel($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setAdresseClient($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setFonctionClient($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIsEmploye($arr[$keys[9]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TblClientPeer::DATABASE_NAME);

		if ($this->isColumnModified(TblClientPeer::ID_CLIENT)) $criteria->add(TblClientPeer::ID_CLIENT, $this->id_client);
		if ($this->isColumnModified(TblClientPeer::CIN_CLIENT)) $criteria->add(TblClientPeer::CIN_CLIENT, $this->cin_client);
		if ($this->isColumnModified(TblClientPeer::NOM_CLIENT)) $criteria->add(TblClientPeer::NOM_CLIENT, $this->nom_client);
		if ($this->isColumnModified(TblClientPeer::PRENOM_CLIENT)) $criteria->add(TblClientPeer::PRENOM_CLIENT, $this->prenom_client);
		if ($this->isColumnModified(TblClientPeer::SITUATION)) $criteria->add(TblClientPeer::SITUATION, $this->situation);
		if ($this->isColumnModified(TblClientPeer::AGE_CLIENT)) $criteria->add(TblClientPeer::AGE_CLIENT, $this->age_client);
		if ($this->isColumnModified(TblClientPeer::NUM_TEL)) $criteria->add(TblClientPeer::NUM_TEL, $this->num_tel);
		if ($this->isColumnModified(TblClientPeer::ADRESSE_CLIENT)) $criteria->add(TblClientPeer::ADRESSE_CLIENT, $this->adresse_client);
		if ($this->isColumnModified(TblClientPeer::FONCTION_CLIENT)) $criteria->add(TblClientPeer::FONCTION_CLIENT, $this->fonction_client);
		if ($this->isColumnModified(TblClientPeer::IS_EMPLOYE)) $criteria->add(TblClientPeer::IS_EMPLOYE, $this->is_employe);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TblClientPeer::DATABASE_NAME);
		$criteria->add(TblClientPeer::ID_CLIENT, $this->id_client);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getIdClient();
	}

	/**
	 * Generic method to set the primary key (id_client column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setIdClient($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getIdClient();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of TblClient (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @param      boolean $makeNew Whether to reset autoincrement PKs and make the object new.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
	{
		$copyObj->setCinClient($this->getCinClient());
		$copyObj->setNomClient($this->getNomClient());
		$copyObj->setPrenomClient($this->getPrenomClient());
		$copyObj->setSituation($this->getSituation());
		$copyObj->setAgeClient($this->getAgeClient());
		$copyObj->setNumTel($this->getNumTel());
		$copyObj->setAdresseClient($this->getAdresseClient());
		$copyObj->setFonctionClient($this->getFonctionClient());
		$copyObj->setIsEmploye($this->getIsEmploye());

		if ($deepCopy && !$this->startCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);
			// store object hash to prevent cycle
			$this->startCopy = true;

			foreach ($this->getTblFactures() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTblFacture($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTblVoitures() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTblVoiture($relObj->copy($deepCopy));
				}
			}

			//unflag object copy
			$this->startCopy = false;
		} // if ($deepCopy)

		if ($makeNew) {
			$copyObj->setNew(true);
			$copyObj->setIdClient(NULL); // this is a auto-increment column, so set to default value
		}
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     TblClient Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TblClientPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TblClientPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a RefSituation object.
	 *
	 * @param      RefSituation $v
	 * @return     TblClient The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRefSituation(RefSituation $v = null)
	{
		if ($v === null) {
			$this->setSituation(NULL);
		} else {
			$this->setSituation($v->getIdSituation());
		}

		$this->aRefSituation = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the RefSituation object, it will not be re-added.
		if ($v !== null) {
			$v->addTblClient($this);
		}

		return $this;
	}


	/**
	 * Get the associated RefSituation object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     RefSituation The associated RefSituation object.
	 * @throws     PropelException
	 */
	public function getRefSituation(PropelPDO $con = null)
	{
		if ($this->aRefSituation === null && ($this->situation !== null)) {
			$this->aRefSituation = RefSituationQuery::create()->findPk($this->situation, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aRefSituation->addTblClients($this);
			 */
		}
		return $this->aRefSituation;
	}


	/**
	 * Initializes a collection based on the name of a relation.
	 * Avoids crafting an 'init[$relationName]s' method name
	 * that wouldn't work when StandardEnglishPluralizer is used.
	 *
	 * @param      string $relationName The name of the relation to initialize
	 * @return     void
	 */
	public function initRelation($relationName)
	{
		if ('TblFacture' == $relationName) {
			return $this->initTblFactures();
		}
		if ('TblVoiture' == $relationName) {
			return $this->initTblVoitures();
		}
	}

	/**
	 * Clears out the collTblFactures collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTblFactures()
	 */
	public function clearTblFactures()
	{
		$this->collTblFactures = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTblFactures collection.
	 *
	 * By default this just sets the collTblFactures collection to an empty array (like clearcollTblFactures());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initTblFactures($overrideExisting = true)
	{
		if (null !== $this->collTblFactures && !$overrideExisting) {
			return;
		}
		$this->collTblFactures = new PropelObjectCollection();
		$this->collTblFactures->setModel('TblFacture');
	}

	/**
	 * Gets an array of TblFacture objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this TblClient is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array TblFacture[] List of TblFacture objects
	 * @throws     PropelException
	 */
	public function getTblFactures($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collTblFactures || null !== $criteria) {
			if ($this->isNew() && null === $this->collTblFactures) {
				// return empty collection
				$this->initTblFactures();
			} else {
				$collTblFactures = TblFactureQuery::create(null, $criteria)
					->filterByTblClient($this)
					->find($con);
				if (null !== $criteria) {
					return $collTblFactures;
				}
				$this->collTblFactures = $collTblFactures;
			}
		}
		return $this->collTblFactures;
	}

	/**
	 * Sets a collection of TblFacture objects related by a one-to-many relationship
	 * to the current object.
	 * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
	 * and new objects from the given Propel collection.
	 *
	 * @param      PropelCollection $tblFactures A Propel collection.
	 * @param      PropelPDO $con Optional connection object
	 */
	public function setTblFactures(PropelCollection $tblFactures, PropelPDO $con = null)
	{
		$this->tblFacturesScheduledForDeletion = $this->getTblFactures(new Criteria(), $con)->diff($tblFactures);

		foreach ($tblFactures as $tblFacture) {
			// Fix issue with collection modified by reference
			if ($tblFacture->isNew()) {
				$tblFacture->setTblClient($this);
			}
			$this->addTblFacture($tblFacture);
		}

		$this->collTblFactures = $tblFactures;
	}

	/**
	 * Returns the number of related TblFacture objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TblFacture objects.
	 * @throws     PropelException
	 */
	public function countTblFactures(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collTblFactures || null !== $criteria) {
			if ($this->isNew() && null === $this->collTblFactures) {
				return 0;
			} else {
				$query = TblFactureQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByTblClient($this)
					->count($con);
			}
		} else {
			return count($this->collTblFactures);
		}
	}

	/**
	 * Method called to associate a TblFacture object to this object
	 * through the TblFacture foreign key attribute.
	 *
	 * @param      TblFacture $l TblFacture
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function addTblFacture(TblFacture $l)
	{
		if ($this->collTblFactures === null) {
			$this->initTblFactures();
		}
		if (!$this->collTblFactures->contains($l)) { // only add it if the **same** object is not already associated
			$this->doAddTblFacture($l);
		}

		return $this;
	}

	/**
	 * @param	TblFacture $tblFacture The tblFacture object to add.
	 */
	protected function doAddTblFacture($tblFacture)
	{
		$this->collTblFactures[]= $tblFacture;
		$tblFacture->setTblClient($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this TblClient is new, it will return
	 * an empty collection; or if this TblClient has previously
	 * been saved, it will retrieve related TblFactures from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in TblClient.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array TblFacture[] List of TblFacture objects
	 */
	public function getTblFacturesJoinTblVoiture($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = TblFactureQuery::create(null, $criteria);
		$query->joinWith('TblVoiture', $join_behavior);

		return $this->getTblFactures($query, $con);
	}

	/**
	 * Clears out the collTblVoitures collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTblVoitures()
	 */
	public function clearTblVoitures()
	{
		$this->collTblVoitures = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTblVoitures collection.
	 *
	 * By default this just sets the collTblVoitures collection to an empty array (like clearcollTblVoitures());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initTblVoitures($overrideExisting = true)
	{
		if (null !== $this->collTblVoitures && !$overrideExisting) {
			return;
		}
		$this->collTblVoitures = new PropelObjectCollection();
		$this->collTblVoitures->setModel('TblVoiture');
	}

	/**
	 * Gets an array of TblVoiture objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this TblClient is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array TblVoiture[] List of TblVoiture objects
	 * @throws     PropelException
	 */
	public function getTblVoitures($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collTblVoitures || null !== $criteria) {
			if ($this->isNew() && null === $this->collTblVoitures) {
				// return empty collection
				$this->initTblVoitures();
			} else {
				$collTblVoitures = TblVoitureQuery::create(null, $criteria)
					->filterByTblClient($this)
					->find($con);
				if (null !== $criteria) {
					return $collTblVoitures;
				}
				$this->collTblVoitures = $collTblVoitures;
			}
		}
		return $this->collTblVoitures;
	}

	/**
	 * Sets a collection of TblVoiture objects related by a one-to-many relationship
	 * to the current object.
	 * It will also schedule objects for deletion based on a diff between old objects (aka persisted)
	 * and new objects from the given Propel collection.
	 *
	 * @param      PropelCollection $tblVoitures A Propel collection.
	 * @param      PropelPDO $con Optional connection object
	 */
	public function setTblVoitures(PropelCollection $tblVoitures, PropelPDO $con = null)
	{
		$this->tblVoituresScheduledForDeletion = $this->getTblVoitures(new Criteria(), $con)->diff($tblVoitures);

		foreach ($tblVoitures as $tblVoiture) {
			// Fix issue with collection modified by reference
			if ($tblVoiture->isNew()) {
				$tblVoiture->setTblClient($this);
			}
			$this->addTblVoiture($tblVoiture);
		}

		$this->collTblVoitures = $tblVoitures;
	}

	/**
	 * Returns the number of related TblVoiture objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TblVoiture objects.
	 * @throws     PropelException
	 */
	public function countTblVoitures(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collTblVoitures || null !== $criteria) {
			if ($this->isNew() && null === $this->collTblVoitures) {
				return 0;
			} else {
				$query = TblVoitureQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByTblClient($this)
					->count($con);
			}
		} else {
			return count($this->collTblVoitures);
		}
	}

	/**
	 * Method called to associate a TblVoiture object to this object
	 * through the TblVoiture foreign key attribute.
	 *
	 * @param      TblVoiture $l TblVoiture
	 * @return     TblClient The current object (for fluent API support)
	 */
	public function addTblVoiture(TblVoiture $l)
	{
		if ($this->collTblVoitures === null) {
			$this->initTblVoitures();
		}
		if (!$this->collTblVoitures->contains($l)) { // only add it if the **same** object is not already associated
			$this->doAddTblVoiture($l);
		}

		return $this;
	}

	/**
	 * @param	TblVoiture $tblVoiture The tblVoiture object to add.
	 */
	protected function doAddTblVoiture($tblVoiture)
	{
		$this->collTblVoitures[]= $tblVoiture;
		$tblVoiture->setTblClient($this);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this TblClient is new, it will return
	 * an empty collection; or if this TblClient has previously
	 * been saved, it will retrieve related TblVoitures from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in TblClient.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array TblVoiture[] List of TblVoiture objects
	 */
	public function getTblVoituresJoinRefMarque($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = TblVoitureQuery::create(null, $criteria);
		$query->joinWith('RefMarque', $join_behavior);

		return $this->getTblVoitures($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this TblClient is new, it will return
	 * an empty collection; or if this TblClient has previously
	 * been saved, it will retrieve related TblVoitures from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in TblClient.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array TblVoiture[] List of TblVoiture objects
	 */
	public function getTblVoituresJoinRefMotorisation($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = TblVoitureQuery::create(null, $criteria);
		$query->joinWith('RefMotorisation', $join_behavior);

		return $this->getTblVoitures($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this TblClient is new, it will return
	 * an empty collection; or if this TblClient has previously
	 * been saved, it will retrieve related TblVoitures from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in TblClient.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array TblVoiture[] List of TblVoiture objects
	 */
	public function getTblVoituresJoinRefNbrPortes($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = TblVoitureQuery::create(null, $criteria);
		$query->joinWith('RefNbrPortes', $join_behavior);

		return $this->getTblVoitures($query, $con);
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id_client = null;
		$this->cin_client = null;
		$this->nom_client = null;
		$this->prenom_client = null;
		$this->situation = null;
		$this->age_client = null;
		$this->num_tel = null;
		$this->adresse_client = null;
		$this->fonction_client = null;
		$this->is_employe = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->applyDefaultValues();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all references to other model objects or collections of model objects.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect
	 * objects with circular references (even in PHP 5.3). This is currently necessary
	 * when using Propel in certain daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all referrer objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collTblFactures) {
				foreach ($this->collTblFactures as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTblVoitures) {
				foreach ($this->collTblVoitures as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		if ($this->collTblFactures instanceof PropelCollection) {
			$this->collTblFactures->clearIterator();
		}
		$this->collTblFactures = null;
		if ($this->collTblVoitures instanceof PropelCollection) {
			$this->collTblVoitures->clearIterator();
		}
		$this->collTblVoitures = null;
		$this->aRefSituation = null;
	}

	/**
	 * Return the string representation of this object
	 *
	 * @return string
	 */
	public function __toString()
	{
		return (string) $this->exportTo(TblClientPeer::DEFAULT_STRING_FORMAT);
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseTblClient:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		return parent::__call($name, $params);
	}

} // BaseTblClient
