<?php


/**
 * Base class that represents a query for the 'tbl_tapie' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6-dev on:
 *
 * 11/26/13 16:45:59
 *
 * @method     TblTapieQuery orderByNumTapie($order = Criteria::ASC) Order by the num_tapie column
 * @method     TblTapieQuery orderByTailleTapie($order = Criteria::ASC) Order by the taille_tapie column
 * @method     TblTapieQuery orderByMontantLavageTapie($order = Criteria::ASC) Order by the montant_lavage_tapie column
 * @method     TblTapieQuery orderByDateLavage($order = Criteria::ASC) Order by the date_lavage column
 *
 * @method     TblTapieQuery groupByNumTapie() Group by the num_tapie column
 * @method     TblTapieQuery groupByTailleTapie() Group by the taille_tapie column
 * @method     TblTapieQuery groupByMontantLavageTapie() Group by the montant_lavage_tapie column
 * @method     TblTapieQuery groupByDateLavage() Group by the date_lavage column
 *
 * @method     TblTapieQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     TblTapieQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     TblTapieQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     TblTapie findOne(PropelPDO $con = null) Return the first TblTapie matching the query
 * @method     TblTapie findOneOrCreate(PropelPDO $con = null) Return the first TblTapie matching the query, or a new TblTapie object populated from the query conditions when no match is found
 *
 * @method     TblTapie findOneByNumTapie(int $num_tapie) Return the first TblTapie filtered by the num_tapie column
 * @method     TblTapie findOneByTailleTapie(int $taille_tapie) Return the first TblTapie filtered by the taille_tapie column
 * @method     TblTapie findOneByMontantLavageTapie(double $montant_lavage_tapie) Return the first TblTapie filtered by the montant_lavage_tapie column
 * @method     TblTapie findOneByDateLavage(string $date_lavage) Return the first TblTapie filtered by the date_lavage column
 *
 * @method     array findByNumTapie(int $num_tapie) Return TblTapie objects filtered by the num_tapie column
 * @method     array findByTailleTapie(int $taille_tapie) Return TblTapie objects filtered by the taille_tapie column
 * @method     array findByMontantLavageTapie(double $montant_lavage_tapie) Return TblTapie objects filtered by the montant_lavage_tapie column
 * @method     array findByDateLavage(string $date_lavage) Return TblTapie objects filtered by the date_lavage column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseTblTapieQuery extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BaseTblTapieQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'TblTapie', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new TblTapieQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    TblTapieQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof TblTapieQuery) {
			return $criteria;
		}
		$query = new TblTapieQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    TblTapie|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = TblTapiePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(TblTapiePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    TblTapie A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT `NUM_TAPIE`, `TAILLE_TAPIE`, `MONTANT_LAVAGE_TAPIE`, `DATE_LAVAGE` FROM `tbl_tapie` WHERE `NUM_TAPIE` = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new TblTapie();
			$obj->hydrate($row);
			TblTapiePeer::addInstanceToPool($obj, (string) $key);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    TblTapie|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    TblTapieQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(TblTapiePeer::NUM_TAPIE, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    TblTapieQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(TblTapiePeer::NUM_TAPIE, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the num_tapie column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByNumTapie(1234); // WHERE num_tapie = 1234
	 * $query->filterByNumTapie(array(12, 34)); // WHERE num_tapie IN (12, 34)
	 * $query->filterByNumTapie(array('min' => 12)); // WHERE num_tapie > 12
	 * </code>
	 *
	 * @param     mixed $numTapie The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblTapieQuery The current query, for fluid interface
	 */
	public function filterByNumTapie($numTapie = null, $comparison = null)
	{
		if (is_array($numTapie) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(TblTapiePeer::NUM_TAPIE, $numTapie, $comparison);
	}

	/**
	 * Filter the query on the taille_tapie column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByTailleTapie(1234); // WHERE taille_tapie = 1234
	 * $query->filterByTailleTapie(array(12, 34)); // WHERE taille_tapie IN (12, 34)
	 * $query->filterByTailleTapie(array('min' => 12)); // WHERE taille_tapie > 12
	 * </code>
	 *
	 * @param     mixed $tailleTapie The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblTapieQuery The current query, for fluid interface
	 */
	public function filterByTailleTapie($tailleTapie = null, $comparison = null)
	{
		if (is_array($tailleTapie)) {
			$useMinMax = false;
			if (isset($tailleTapie['min'])) {
				$this->addUsingAlias(TblTapiePeer::TAILLE_TAPIE, $tailleTapie['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($tailleTapie['max'])) {
				$this->addUsingAlias(TblTapiePeer::TAILLE_TAPIE, $tailleTapie['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblTapiePeer::TAILLE_TAPIE, $tailleTapie, $comparison);
	}

	/**
	 * Filter the query on the montant_lavage_tapie column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByMontantLavageTapie(1234); // WHERE montant_lavage_tapie = 1234
	 * $query->filterByMontantLavageTapie(array(12, 34)); // WHERE montant_lavage_tapie IN (12, 34)
	 * $query->filterByMontantLavageTapie(array('min' => 12)); // WHERE montant_lavage_tapie > 12
	 * </code>
	 *
	 * @param     mixed $montantLavageTapie The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblTapieQuery The current query, for fluid interface
	 */
	public function filterByMontantLavageTapie($montantLavageTapie = null, $comparison = null)
	{
		if (is_array($montantLavageTapie)) {
			$useMinMax = false;
			if (isset($montantLavageTapie['min'])) {
				$this->addUsingAlias(TblTapiePeer::MONTANT_LAVAGE_TAPIE, $montantLavageTapie['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($montantLavageTapie['max'])) {
				$this->addUsingAlias(TblTapiePeer::MONTANT_LAVAGE_TAPIE, $montantLavageTapie['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblTapiePeer::MONTANT_LAVAGE_TAPIE, $montantLavageTapie, $comparison);
	}

	/**
	 * Filter the query on the date_lavage column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByDateLavage('2011-03-14'); // WHERE date_lavage = '2011-03-14'
	 * $query->filterByDateLavage('now'); // WHERE date_lavage = '2011-03-14'
	 * $query->filterByDateLavage(array('max' => 'yesterday')); // WHERE date_lavage > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $dateLavage The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    TblTapieQuery The current query, for fluid interface
	 */
	public function filterByDateLavage($dateLavage = null, $comparison = null)
	{
		if (is_array($dateLavage)) {
			$useMinMax = false;
			if (isset($dateLavage['min'])) {
				$this->addUsingAlias(TblTapiePeer::DATE_LAVAGE, $dateLavage['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($dateLavage['max'])) {
				$this->addUsingAlias(TblTapiePeer::DATE_LAVAGE, $dateLavage['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(TblTapiePeer::DATE_LAVAGE, $dateLavage, $comparison);
	}

	/**
	 * Exclude object from result
	 *
	 * @param     TblTapie $tblTapie Object to remove from the list of results
	 *
	 * @return    TblTapieQuery The current query, for fluid interface
	 */
	public function prune($tblTapie = null)
	{
		if ($tblTapie) {
			$this->addUsingAlias(TblTapiePeer::NUM_TAPIE, $tblTapie->getNumTapie(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BaseTblTapieQuery