<?php

/**
 * Skeleton subclass for performing query and update operations on the 'tbl_voiture' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.6-dev on:
 *
 * 10/12/13 18:14:04
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class TblVoitureQuery extends BaseTblVoitureQuery {

    /**
     * filtrer les colonnes datatable
     * @param type $searchs
     * @return type
     */
    public function filterByDatatable($searchs = "") {
        if ($searchs == '')
            return $this;
        $arrayCondition = $arrayCombine = array();
        foreach (explode(" ", $searchs) as $i => $search) {
            $search = '%' . $search . '%';

            $this->condition('nomClient' . $i, 'TblClient.NomClient LIKE ?', $search)
                    ->condition('prenomClient' . $i, 'TblClient.PrenomClient LIKE ?', $search)
                    ->condition('motorisation' . $i, 'RefMotorisation.Motorisation LIKE ?', $search)
                    ->condition('immat' . $i, 'tbl_voiture.Immatriculation LIKE ?', $search);
//                    ->condition('idFacture' . $i, 'TblFacture.IdFacture LIKE ?', $search);

            $arrayCondition[] = 'nomClient' . $i;
            $arrayCondition[] = 'prenomClient' . $i;
            $arrayCondition[] = 'motorisation' . $i;
            $arrayCondition[] = 'immat' . $i;
//            $arrayCondition[] = 'idFacture' . $i;

            $this->combine($arrayCondition, 'or', "combine" . $i);
            $arrayCombine[] = "combine" . $i;
            $arrayCondition = array();
        }

        return $this->combine($arrayCombine, 'and');
    }

    public function orderByDatatable($col, $order) {
        switch ($col) {
            case 0:
                $this->orderByImmatriculation($order);
                break;
            case 1:
                $this->useTblClientQuery()
                        ->orderByPrenomClient($order)
                        ->endUse();
                break;
//            case 3:
//                $this->useTblFactureQuery()
//                        ->orderByPrixLavage($order)
//                        ->endUse();
//                break;
//            case 4:
//                $this->useTblFactureQuery()
//                        ->orderByDateReglement($order)
//                        ->endUse();
//                break;
        }
        return $this;
    }

    public function filterByDateReglement($dateReglement) {
        if ($dateReglement) {
            return $this->useTblFactureQuery()
                            ->filterByDateReglement($dateReglement)
                        ->endUse();
        } else {
            return $this;
        }
    }

}

// TblVoitureQuery
